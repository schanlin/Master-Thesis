{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Sitka Text;}{\f1\fmodern\fcharset0\fprq2 Segoe UI;}{\f2\fmodern\fcharset0\fprq2 Sitka Small;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;\red182\green231\blue254;\red189\green244\blue155;\red255\green250\blue145;\red255\green171\blue186;\red245\green168\blue159;\red202\green202\blue202;\red215\green127\blue250;\red252\green226\blue33;\red255\green196\blue160;\red254\green186\blue30;\red164\green217\blue121;\red236\green184\blue255;\red138\green211\blue82;\red254\green207\blue209;\red249\green199\blue219;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\deftab1200\fet2\ftnbj\aenddoc
\f0\fs24\cf0\ftnbj\ftnnar\aftnnar
\sectd\sftnnar\saftnnar\sftnnar\saftnnar\pgndec\pgnrestart\pgnstarts1{\header{}}{\footer{}}
\pard\plain \ltrch\loch {\f1\fs18\b0\i0 00:04\~I: bist du damit einverstanden, dass das gespr\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ch hier aufgezeichnet wird?  }
\par\pard\plain \ltrch\loch \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:06\~B: ja, bin ich  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:07\~I: das interview besteht aus so zweieinhalb, drei teilen. der erste teil ist ein kurzer fragebogen zu deiner programmiererfahrung. und beginnt mit der frage, wie alt bist du?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:23\~B: ich bin 23  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:27\~I: wie viele jahre programmierst du insgesamt schon?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:30\~B: zwei jahre nach der ausbildung, drei jahre in der ausbildung, ein jahr privat, also sechs jahre kumuliert  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:40\~I: wie viele davon in ausbildung, das waren drei?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:44\~B: genau, drei  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:46\~I: welche art ausbildung war das?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:52\~B: berufsausbildung als fachinformatiker anwendungsentwicklung  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 00:58\~I: seit wie viel jahren programmierst du insgesamt f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr gr\u246\'F6\u223\'DFere softwareprojekte, zum beispiel in einer firma?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 01:05\~B: also inklusive ausbildung seit 5 jahren, ausschlie\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFlich (?nach) gr\u246\'F6\u223\'DFeren projekten  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 01:11\~I: wie gro\loch\af1\hich\af1\dbch\af1\uc1\u223\'DF sind deine professionellen projekte \u252\'FCblicherweise? wir unterscheiden da in klein, mittel, gro\u223\'DF. klein ist unter 900 codezeilen, mittel ist 900 bis 40'000, gro\u223\'DF ist \u252\'FCber 40'000  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 01:25\~B: soweit ich wei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DF, die gr\u246\'F6\u223\'DFeren projekte, an denen ich gearbeitet hab, das waren zwei bis drei st\u252\'FCck, aber langzeitprojekte, waren immer \u252\'FCber 40'000, also das waren wirklich sehr gro\u223\'DFe dinge  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 01:40\~I: auf einer skala von 1 bis 10, 1 ist sehr unerfahren, 10 ist sehr erfahren, wie hoch sch\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tzt du deine programmiererfahrung ein?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 01:55\~B: ich w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrd sagen f\u252\'FCr den stand, f\u252\'FCr die erfahrung, die ich habe, sehr hoch, also ich w\u252\'FCrde sagen eine gute 9, da ich viel privat (?projekte hab)  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 02:15\~I: auf einer skala von 1 bis 5, wie hoch sch\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tzt du deine programmiererfahrung im vergleich mit experten mit 20 jahren praktischer erfahrung ein?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 02:26\~B: w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrd sagen, ne solide 3. man sieht schon manchmal den erfahrungsunterschied.\~  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 02:37\~I: auf ner skala von 1 bis 5, wie hoch sch\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tzt du deine programmiererfahrung im vergleich mit deinen kollegen, beziehungsweise mit leuten, die \u228\'E4hnliches machen wie du, ein?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 02:49\~B: 10, weil da kommt wirklich die private entwicklung extrem zu hilfe  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 03:00\~I: okay, also in dem fall machen wir 5  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 03:01\~B: ah ja, genau  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 03:05\~I: wie viele programmiersprachen kennst du, bei denen du deine erfahrung bei 3 oder h\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6her einsch\u228\'E4tzen w\u252\'FCrdest?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 03:15\~B: 3  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 03:16\~I: welche?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 03:18\~B: das w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ren/ wobei, vielleicht sogar 4. sagen wir 4. also javascript und typescript, c# und c++  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 03:54\~I: wie erfahren bist du mit den folgenden programmierparadigmen? wieder auf einer skala von 1 bis 5, das erste w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4r funktionale programmierung. also beispiel von sprachen, die das benutzen, sind haskell und lisp  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 04:15\~B: ich kann damit was anfangen, aber ich bin in der theorie einfach exakt schlechter als in der praxis, also was war die frage nochmal, wie erfahren ich damit bin?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 04:25\~I: genau. wieder erfahrung einsch\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tzen auf 1 bis 5  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 04:33\~B: ich glaub sogar, javascript z\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4hlt als funktionale programmiersprache, deswegen w\u252\'FCrde ich sagen so (?tats\u228\'E4chlich) ne 4. kommt nat\u252\'FCrlich auf den usecase an.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 04:40\~I: imperative programmierung? so pascal, c  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 05:09\~B: ich kann mit dem wort leider nichts anfangen. eher 1  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 05:25\~I: dann gibt es logische programmierung. da wird als beispielsprache immer prolog genannt  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 05:32\~B: tats\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4chlich h\u228\'E4tte ich gesagt 1, das wende ich praktisch auch nicht an. es klingt sehr speziell  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 05:48\~I: und das letzte ist objekt-orientiert  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 05:51\~B: 5, das ist halt mein hauptberuf  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 06:27\~I: okay, zweiter teil. da geht's um deinen programmierprozess. dazu w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrde ich dich als erstes einfach gern drum bitten, mir was \u252\'FCber ein einigerma\u223\'DFen aktuelles, also kann auch abgeschlossen sein, kann noch in arbeit sein, ein aktuelles projekt zu erz\u228\'E4hlen, von der arbeit oder privat, was du lust hast  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 06:48\~B: wir arbeiten momentan an einer software, die ist f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr automatisierungsprozesse da. das hei\u223\'DFt es geht haupts\u228\'E4chlich um hardware im sinne von, man hat ganz viel software, die auf hardware laufen muss. und diese hardware soll beobachtet werden, ob die ressourcen noch vorhanden sind, wenn nicht, m\u252\'FCssen die quasi erweitert werden, wie erweiterbar sind sie, und dann soll das ganze erweitern auch automatisiert sollen und daf\u252\'FCr schreibe ich momentan die ganze automatisierungssoftware. also haupts\u228\'E4chlich die business-logik. und private projekte, ist witzig, schreibe ich momentan haupts\u228\'E4chlich nur spiele-hacks, weil es in meinem interessenbereich ist.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 07:42\~I: okay, willst du eins davon mal als beispiel so ein bisschen dar\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCber erz\u228\'E4hlen, also, was ist das, was hast du da gemacht?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 07:51\~B: ich nehm einfach das automatisierungsbeispiel als ding. das musst du dir jetzt vorstellen, der input w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4re eine software, die anhand der userlaufzeit, technik, menge an datens\u228\'E4tze, die gespeichert werden sollen, und so weiter, kriegt sie einen fixen wert, der durch x und y berechnet wird, ist komplett irrelevant, aber da wird eben berechnet irgendwie. und anhand dieses werts m\u252\'FCssen wir ein existierendes hardwaresystem finden, welche/ ich wei\u223\'DF nicht, ob dir der begriff cluster etwas sagt  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 08:36\~I: n\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 08:36\~B: ein cluster ist einfach ein einzelner server, der aus mehreren kleineren systemen besteht und die sind (?) zusammengeclustert, das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt du kannst einen workload auf mehrere pcs aufteilen. und wir suchen durch diese ressourcenzahl das perfekte optimalste und optimierteste system, auf dem das laufen kann, weil die systeme kosten logischerweise geld wenn sie laufen. das hei\u223\'DFt, optimierung ist da sehr wichtig. und wir schreiben momentan den algorithmus, der theoretisch die software auf der hardware perfekt verteilt.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 09:23\~I: und wenn du das als projekt nimmst, wie gehst du dabei vor?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 09:30\~B: wir arbeiten haupts\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4chlich mit scrum. wenn dieser arbeitsablauf/ dieser workflow dir was sagt?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 09:37\~I: ich hab schonmal davon geh\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6rt, aber  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 09:43\~}{\f1\fs18\b0\i0 B: also um es wirklich f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr mich/ was f\u252\'FCr mich den relevanten part zu definieren, ist/ scrum sollte theoretisch/ durch das scrum system sollen m\u246\'F6glichst ablenkungen von dem entwickler weggenommen werden. man soll strukturierter arbeiten mit definierten storys, also storys sind anforderungen. das hei\u223\'DFt, }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 scrum w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrde so beginnen, dass man zu allererst eine anforderung hat des kunden, die wird sozusagen refined}{\f1\fs18\b0\i0 . refinement hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, die person, die die anforderungen stellt, kannst du stakeholder nennen oder product owner, oder wie man's nimmt, ich kann es nicht perfekt erkl\u228\'E4ren. }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 der auf jeden fall kommt mit der anforderung, erkl\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4rt uns ungef\u228\'E4hr, was er m\u246\'F6chte, und wir versuchen als experten, eben als die entwickler, klar (?) zu definieren: was soll gemacht werden, was sind die problemstellungen, was muss eventuell noch besprochen werden}{\f1\fs18\b0\i0 , damit die story komplett ohne weitere komplikationen durchgearbeitet werden kann. und wenn diese story definiert ist, kommt sie in ein backlog. backlog hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt einfach nur, sie ist quasi auf dem stack aufgestapelt irgendwann. und }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 irgendwann wird sie von irgendeiner person bearbeitet}{\f1\fs18\b0\i0 . und weil sie refined wurde, kann diese person, egal wann es sie \loch\af1\hich\af1\dbch\af1\uc1\u252\'FCberarbeitet, weil sie eben refined wurde, mit den informationen, }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 die in der story definiert sind, easy abarbeiten}{\f1\fs18\b0\i0 . das quasi ist der step des refinements. und dann gibts erstmal ein planning. planning hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, das ist ein bisschen komisch, man arbeitet in sprints. sprints ist ein synonym f\u252\'FCr eine bestimmte anzahl an tagen, an der wir quasi arbeiten. das hei\u223\'DFt, es kann eine woche sprint geben, zwei wochen sprint geben, aber der zyklus l\u228\'E4uft dann quasi nur zwei wochen lang. das hei\u223\'DFt, wir haben erstmal ein refinement, dann arbeiten wir zwei wochen in dem sprint, dann haben wir nochmal ein refinement, dann haben wir ein planning, dann arbeiten wir nochmal zwei wochen, und so weiter und so weiter. und dann }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 in dem planning planen wir die storys ein, je nachdem, wie viele ressourcen wir haben}{\f1\fs18\b0\i0 . das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, wenn ich als entwickler 20 stunden arbeiten kann aus irgendeinem grund in diesen zwei wochen, weil ich, keine ahnung, nur ne stunde am tag hab. dann versuchen wir diese refineten storys ungef\u228\'E4hr so zuzuteilen, dass ich auf 20 stunden komme. }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 dann arbeite ich diese zwei wochen durch, diesen sprint}{\f1\fs18\b0\i0  und dann gibts eine review. }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 diese review ist dann der kerl, der original die anforderungen gestellt hat dabei, schaut sich die umsetzung der story an und wenn irgendwas nicht stimmt, dann m\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCssen wir das klar durchbesprechen}{\f1\fs18\b0\i0  und im n\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4chsten sprint wird das hoffentlich abgearbeitet, beziehungsweise dann, wenn es wieder f\u252\'FCr mich geplanned wird. long story short, der zyklus ist dann refinenen, plannen, arbeiten, reviewen, refinen, plannen, arbeiten, reviewen.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 12:27\~I: okay. das ist die theorie und in der praxis funktioniert das auch so?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 12:30}{\f1\fs18\b0\i0 \~B: komplikationen gibts immer und }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 leute, die die anforderungen stellen, haben keine ahnung, was sie wollen}{\f1\fs18\b0\i0 . das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt in der reinen theorie ist ja hinter scrum idee, dass der entwickler, der sehr sehr teuer ist, weniger ablenkungen hat. aber }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 praktisch kriegst du ein dutzend mails rein und direkte nachrichten, die niemals h\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tten an dich direkt gestellt werden sollen}{\f1\fs18\b0\i0 , mit fragen, meine ich, die direkt nicht gestellt werden sollen. und so weiter und so weiter, das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, ich bin von 100 prozentiger verf\u252\'FCgbarkeit vielleicht trotzdem nur 80 prozent verf\u252\'FCgbar. gerne hat man in scrum auch den fall, dass }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 deine meetings}{\f1\fs18\b0\i0 , die du hast, diese plannings und reviews, und du hast auch dailys by the way, bei denen du t\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4glich feedback gibst zu den aktuellen storys, die du bearbeitest, aber das geht immer nur 15 minuten, soll schnell gehen. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 die zeit wird meistens missbraucht f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr andere dinge, man spa\u223\'DFt rum, redet \u252\'FCber unwichtige sachen. das problem mit solchen sachen ist, dass manchmal die entwickler dadurch gest\u246\'F6rt werden, weil ihre zeit uneffektiv genutzt wird}{\f1\fs18\b0\i0 . aber das kommt sehr auf die person an. also in der theorie sehr gut, praktisch immer noch gut, aber k\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6nnte man immer ausarbeiten. it is what it is. es ist immer noch besser als, das hatte ich auch schon gehabt, }{\f1\fs18\b0\i0\cb8\chshdng0\chcbpat8 ein arbeitsablauf, bei dem du direkt mit dem kunden redest und der kommt t\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4glich auf dich zu und versucht irgendwelche \u228\'E4nderungen reinzuschieben}{\f1\fs18\b0\i0 . und }{\f1\fs18\b0\i0\cb8\chshdng0\chcbpat8 du baust ja deine arbeit auf das auf, was der kunde dir anfangs gesagt hat und wenn er dann mit einer \loch\af1\hich\af1\dbch\af1\uc1\u228\'E4nderung kommt, kann es sein, dass du alles wieder vom tisch werfen musst und neu anfangen musst}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb9\chshdng0\chcbpat9 deswegen ist es umso cooler, dass ein kunde seine originelle anforderung, bevor sie zwei wochen lang bearbeitet wird, richtig gut erkl\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ren muss}{\f1\fs18\b0\i0 . er muss im endeffekt zahlen, das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, er wei\u223\'DF, dass wenn er jetzt was schlecht definiert, muss er mehr zahlen. deswegen sind die kunden mehr motiviert, mehr arbeit reinzustecken.}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 14:22\~I: kundenerziehung ist das, okay (lacht)  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 14:25\~B: ja, genau (lacht). kann man so sagen. scrum ist definitiv teuer. weil diese ganzen leute, die die storys f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr mich definieren, damit ich sp\u228\'E4ter in ruhe arbeiten kann, sind alles menschen, wie gesagt stackholder, product owner, gibt auch sowas wie scrummaster, der alles \u252\'FCberschaut, damit die meetings nicht missbraucht werden. alles leute, auf die du theoretisch verzichten kannst, wenn du einfach direkt einen entwickler anstellen w\u252\'FCrdest und mit dem direkt redest. das hei\u223\'DFt, wenn du scrum wirklich effektiv einsetzen musst, musst du es hinkriegen, entweder entwickler plus die variable anzahl an zusatzpersonen so produktiv einzusetzen, dass die fehler, die im nachhinein rauskommen, weil die storys gut definiert sind, produktiver sind als ein einzelner entwickler oder quasi x entwickler anzustellen. }{\f1\fs18\b0\i0\cb10\chshdng0\chcbpat10 diese ganze kommunikation muss es im endeffekt trotzdem noch wert machen, dass man \loch\af1\hich\af1\dbch\af1\uc1\u252\'FCberhaupt so viel kommuniziert}{\f1\fs18\b0\i0 . wenn das sinn macht.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 15:20\~I: mehr oder weniger  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 15:21\~B: es ist schwierig zu beschreiben. und es gibt viele leute, die w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrden das ganze system verfluchen, weil man im endeffekt nur sehr viel \u252\'FCber sinnlose sachen redet. aber es hat sich durchgesetzt. alle arbeiten nach scrum in gr\u246\'F6\u223\'DFeren firmen, das wird man immer wieder sehen.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 15:52\~I: und das ist jetzt eher allgemein gesehen, wie das ganze projekt strukturiert ist. wenn du jetzt in einer programmierphase selbst/ da dein vorgehen, kannst du da ein bisschen genauer drauf eingehen?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 16:07\~B: also quasi wie ich an so ner anforderung arbeite?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 16:10\~I: genau  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 16:12}{\f1\fs18\b0\i0 \~B: also }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 es f\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ngt in der regel immer damit an, dass man sich die anforderung GENAU durchliest und \u252\'FCber die gesamte (?implementation) nachdenkt}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 wichtig ist, dass man nicht einfach loslegt, weil man muss \loch\af1\hich\af1\dbch\af1\uc1\u252\'FCber, wie gesagt, diese komplikationen nachdenken}{\f1\fs18\b0\i0 , da du sonst, wie ich grad eben schon gesagt hab, auch eventuell alles vom tisch werfen kannst. }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 da ist auch wichtig, dass man ganz klar wei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DF, was der kunde m\u246\'F6chte und was der sinn \u252\'FCberhaupt der entwicklung ist}{\f1\fs18\b0\i0 , weil man da quasi w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4hrend der entwicklung auch eventuell die kundenanforderungen hinterfragt, im sinne von, kann man das sogar noch sinnvoller machen, als der kunde es m\u246\'F6chte. auf jeden fall anforderungen sehr sehr sehr genau durchlesen, anschlie\u223\'DFend kommt es draufan, wo der code implementiert werden soll. das hei\u223\'DFt bei der bestehenden software hast du quasi schon bestehenden code und meistens ist es so, dass du bestehenden code erweiterst. manchmal machst du auch von scratch was ganz neues, aber es kommt da immer draufan.\~aber }{\f1\fs18\b0\i0\cb11\chshdng0\chcbpat11 wenn es bestehenden code gibt, den musst du dir ganz genau durchlesen, damit man sehen kann, welche stellen kritisch sind, worauf sollte man achten}{\f1\fs18\b0\i0 , man sollte nicht einfach so drauf loslegen, weil }{\f1\fs18\b0\i0\cb11\chshdng0\chcbpat11 man darf die bestehende businesslogik nicht ver\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ndern, weil es sonst unverhersehbare fehler gibt}{\f1\fs18\b0\i0 . aber wir arbeiten gern bei uns im betrieb nach }{\f1\fs18\b0\i0\cb12\chshdng0\chcbpat12 test-driven-development}{\f1\fs18\b0\i0  hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt es. }{\f1\fs18\b0\i0\cb12\chshdng0\chcbpat12 test-driven-development hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, dass man zuerst einen so genannten unit test schreibt, der die implementation mit testf\u228\'E4llen erstmal abdeckt}{\f1\fs18\b0\i0 . das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt wenn man taschenrechner baut, h\u228\'E4ttest du sag mal f\u252\'FCnf tests, die quasi deine logik testen, multiplikation, addition, subtrahieren und so weiter. und es (?logischerweise klare abfolge) man hat den input, man hat den output. und den kann man so nen unit test klar definieren und das gute daran ist, theoretisch }{\f1\fs18\b0\i0\cb12\chshdng0\chcbpat12 wenn man an bestehendem code arbeitet, solltest du, bevor du deinen code fertigstellt, erstmal diese unit tests laufen lassen, weil diese unit tests sollen absichern, dass deine aktuellen \loch\af1\hich\af1\dbch\af1\uc1\u228\'E4nderungen nicht bestehenden code gebrochen haben}{\f1\fs18\b0\i0 . weil wenn du eventuell irgendwas gebrochen hast, sollte der unit test failen und nicht succeeden. long story short, es ist wichtig, auf bestehende logik zu achten, }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 bei neuer logik, wie gesagt, es ist umso wichtiger, dass man die anforderungen liest}{\f1\fs18\b0\i0  und }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 dann geht's eben daran zu implementieren. step f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr step, aber halt strukturiert}{\f1\fs18\b0\i0 , ich wei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DF nicht, wie ich das im detail beschreiben sollte.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 18:32\~I: zum beispiel anhand von einem beispiel?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 18:34}{\f1\fs18\b0\i0 \~B: sagen wir mal es geht darum, man hat ein formular mit sowas wie vorname, nachname und e-mail. jetzt soll noch ne telefonnummer hinzugef\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCgt werden. bei solchen sachen ist bekannt, meistens bei formularen, wenn man irgendwas ausf\u252\'FCllt, m\u252\'FCssen daten abgespeichert werden. die werden in einer datenbank abgespeichert. es gibt x verschiedene arten von datenbanken, aber meistens arbeiten sie mit spalten oder feldern oder whatever. diese felder m\u252\'FCssen immer angelegt werden, damit ne telefonnummer gespeichert werden muss, brauchst du ein neues feld. das hei\u223\'DFt, es wird erstmal richtig angelegt und (?sobald wenn mal) die daten komplizierter werden, musst du (?) die ganzen beziehungen in den daten, wie die daten zusammenarbeiten noch richtig gut strukturieren und da muss man sich vorher gedanken machen, }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 aber im endeffekt muss man erstmal schauen, wie werden die daten gespeichert}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 wenn man das hat, dann erweitert man den code um das neue feld, damit man im code mit dem neuen feld arbeiten kann aus der datenbank}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb11\chshdng0\chcbpat11 anschlie\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFend w\u252\'FCrde ich mir den bestehenden code anschauen, w\u252\'FCrde mir rausziehen, an welcher stelle ich das implementieren muss}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb12\chshdng0\chcbpat12 und logischerweise w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4hrend der entwicklung die ganze zeit testen, also eigenen code testen, soweit mans irgendwie kann}{\f1\fs18\b0\i0 . an alle usecases, die man kennt, anschlie\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFend, wie gesagt, implementieren. }{\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 dann fertigstellen}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb12\chshdng0\chcbpat12 dann nochmal alles durchtesten}{\f1\fs18\b0\i0  }{\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 und dann gehts dann ans committen}{\f1\fs18\b0\i0 . committen ist einfach deinen code einschie\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFen, also dein code ist durch. und beim committen logischerweise, das ist auch ein wichtiger part, }{\f1\fs18\b0\i0\cb10\chshdng0\chcbpat10 w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4hrend der entwicklung hat man \u246\'F6fter testvariablen, oder man nennt sachen dumm, weil man einfach nur tempor\u228\'E4r was testen m\u246\'F6chte, oder man hat eventuell einfach einen dummen gedanken gehabt und dieser codeblock ist einfach \u252\'FCberfl\u252\'FCssig geworden, das siehst du aber erst beim zweiten blick. wichtig ist vor dem committen auf jeden fall jede einzelne datei und jede \u228\'E4nderung durchschauen, egal wie aufwendig es ist}{\f1\fs18\b0\i0 . weil es macht sich bezahlt. und wenn das quasi durch ist, dann committest du deinen code. dieser code ist aber jedoch nicht im sogenannten master branch/ muss ich das erkl\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ren?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 20:31\~I: ich kann git so einigerma\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFen. passt schon.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 20:35}{\f1\fs18\b0\i0 \~B: okay. du arbeitest logischerweise in deinem eigenen branch und bevor es in den master kommt, arbeiten wir mit pull-requests. das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, gehen wir mal von dem szenario aus, dass ich der entwickler bin, }{\f1\fs18\b0\i0\cb13\chshdng0\chcbpat13 dann stell ich einen pull-request f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrs mergen eben und der muss reviewt werden von einem mitarbeiter}{\f1\fs18\b0\i0 . der macht das dann, wenn er kann. es muss logischerweise im scrum auch irgendwann mit beeinflusst werden, aber egal. }{\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 wenn er\loch\af1\hich\af1\dbch\af1\uc1\u8217\'92s reviewt hat und alles cool ist, dann merget er's in den master branch}{\f1\fs18\b0\i0 . wenn nicht, dann schreibt er sein }{\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 feedback}{\f1\fs18\b0\i0  in kommentaren, sagt: "hey, das muss (?) werden, das funktioniert gar nicht." weil er muss logischerweise auch meinen code testen. }{\f1\fs18\b0\i0\cb9\chshdng0\chcbpat9 weil es geht im endeffekt darum, dass man einfach ein vier-augen-prinzip hat, bevor es \loch\af1\hich\af1\dbch\af1\uc1\u252\'FCberhaupt an den kunden geht}{\f1\fs18\b0\i0 .\~weil man will ja mit kunden bestm\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6glichst ein gutes ergebnis zeigen. und wenn er gr\u246\'F6\u223\'DFere themen hat, dann kommentiert er sie. im besten fall kann er sie selber fixen, weil es wirklich nur kleinigkeiten sind, sowas wie, ich hab was dumm benannt. da w\u228\'E4rs zu teuer, wenn er MIR erkl\u228\'E4ren w\u252\'FCrde, was ich dumm benannt habe und, dann mach ich das. im besten fall macht er's einfach direkt. }{\f1\fs18\b0\i0\cb12\chshdng0\chcbpat12 wenn's was schlimmeres ist und da gibt's richtige fehler, dann kommentiert er seine testf\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4lle und ich muss das ganze eben nochmal im neudurchlauf durchtesten}{\f1\fs18\b0\i0  }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 und eventuell fixen}{\f1\fs18\b0\i0 , oder je nachdem, wie schlimm eben der fehler ist. manchmal gibt es so f\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4lle, da sagt er einfach: "hey, das k\u246\'F6nnte man optimieren.\u8221\'94 }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 da muss ich eben den code optimieren}{\f1\fs18\b0\i0 . und }{\f1\fs18\b0\i0\cb9\chshdng0\chcbpat9 wenn es wirklich ein ganz gr\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6\u223\'DFeres thema ist, wo man auf ein problem st\u246\'F6\u223\'DFt, was vorher nicht definiert wurde, dann pairen wir meistens, das hei\u223\'DFt, wir arbeiten zusammen an dem problem, damit wir ein direktes vier-augen-prinzip haben und das problem im besten fall l\u246\'F6sen k\u246\'F6nnen}{\f1\fs18\b0\i0 . long story short, danach landet der code im branch. er wird deployed.}{\f1\fs18\b0\i0\cb12\chshdng0\chcbpat12  es geht an den kunden. der kunde sagt: \loch\af1\hich\af1\dbch\af1\uc1\u8220\'93ja, cool." oder er sagt: "oh gott, nein. fehler, fehler, fehler."}{\f1\fs18\b0\i0  und scrum soll auch by the way auch daf\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr sorgen, dass der kunde m\u246\'F6glichst viele dinge viel (?), durch viele testbarrieren. das ist so der theoretische arbeitsablauf, wie es im besten fall ist. praktisch/ achso vielleicht ist das sogar die n\u228\'E4chste frage, wie es praktisch aussieht  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 22:43\~I: ja w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4re es, genau  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 23:00}{\f1\fs18\b0\i0 \~B: man arbeitet meistens in teams und nicht jedes teammitglied tr\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4gt dieselbe verantwortung in sich und denkt: "alles, was ich mache, soll geiler schei\u223\'DF sein." sorry f\u252\'FCr die ausdrucksweise. auf jeden fall hatten wir erst letzte woche einen fall, da/ ich hab grad eben was von unit tests erkl\u228\'E4rt. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 wir hatten bestehende logik und er hat ne code-implementation gemacht und einer der unit tests ist gecrasht}{\f1\fs18\b0\i0 . und bevor man code deployen kann, haben wir eine weitere barriere, das sind sogenannte pipelines, die pr\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCfen, ob alle unit tests gelaufen sind. ansonsten hast du einfach einen bot, der sagt: "hey, du kannst nicht committen. fix den fehler!" oder "fix den test." und er hat das eben den pull-request gestellt, wollte seinen code kommentieren lassen und die barriere hat gesagt gehabt: "ey, hier ist ein fehler. fix den test." und dann habe ich das kommentiert im sinne von: \u8220\'93ey, hier hast du einen test, den du l\u246\'F6sen musst.\u8221\'94 dann ging die story zur\u252\'FCck an ihn. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 seine l\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6sung daf\u252\'FCr war, den test einfach auszukommentieren und zu entfernen (lacht). dann hat er einen neuen pull-request gestellt und gesagt: "hier, das problem ist behoben, der bot sagt nicht mehr 'nein, nein, stopp.'" und dann sage ich ihm: "ja, er sagt nicht mehr stopp, weil der test nicht mehr da ist." das ist logischerweise nicht die richtige l\u246\'F6sung}{\f1\fs18\b0\i0 . und mit solchen sachen muss man sich auseinandersetzen, weil ich pers\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6nlich halt mich an die regeln, so gut es geht, aber }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 jeder hat mal schlechte und gute tage. das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt manchmal (?f\u228\'E4llt sowas) einfach unterm tisch durch, dann passiert das halt eben}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb9\chshdng0\chcbpat9 da hilft das vier-augen-prinzip}{\f1\fs18\b0\i0 . aber das ist auch gar nichts verwerfliches, jeder hat mal nen schlechten tag, jeder macht mal fehler. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 jedoch wir reden hier nicht von fehlern, wir reden hier von disziplin. und manche leute haben disziplin nicht}{\f1\fs18\b0\i0  und dann kommt sowas eben wie mit diesem fehler grade. und mit solchen sachen muss man sich halt auch rumschlagen, was sehr nervt\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6tend ist.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 24:50\~I: ok}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 24:50\~B: es ist halt wirklich nervig und man sucht sich seine teammitglieder manchmal nicht aus}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 24:58\~I: kenn ich  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 25:01\~B: auch an der uni wahrscheinlich, ja  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 25:03\~I: ja  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 25:13}{\f1\fs18\b0\i0 \~B: man f\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4llt sehr schnell auch in, wie sagt man,}{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7  in dieses ph\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4nomen, dass man denkt, es ist schwierig. es geht auch sehr ins psychische}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb10\chshdng0\chcbpat10 man darf bei solchen fehlern, die man findet, die leute niemals verurteilen. du musst die leute individuell behandeln. die menschen selber sind nicht der code, den sie schreiben.}{\f1\fs18\b0\i0  }{\f1\fs18\b0\i0\cb10\chshdng0\chcbpat10 das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, wenn du schlechten code siehst, darfst du die person nicht runtermachen. das ist etwas, was viele leute nicht beherrschen.}{\f1\fs18\b0\i0  das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, gerne kommt es zu komplikationen oder argumenten oder streit und \u246\'F6fter fallen auch b\u246\'F6se w\u246\'F6rter und leute werden abgemahnt oder gefeuert, weil irgendeine person, irgendwas, ich sag mal in anf\u252\'FChrungszeichen, was sehr dummes gemacht hat. aber er k\u246\'F6nnte dieses sehr dumme mit den besten absichten machen. das kann vorkommen. wenn die person dann nicht gesehen hat bei der implementation, wieso \u252\'FCberhaupt diesen, in anf\u252\'FChrungszeichen, schei\u223\'DF produziert hat und dich nicht hinterfragst oder ihn mal direkt fragst: "hey, wieso hast du das so gemacht?" sondern ihn direkt verurteilst, dann kann es mit den ganzen meetings dazu kommen, dass man die person dann eben (?). und dann kommt's eben zu streit. worauf ich eigentlich hinaus wollte, ist, man darf sich nicht immer f\u252\'FCr den besten halten. es ist sehr einfach, leute zu verurteilen, aber wenn dieselbe person irgendwann das gleiche gegen deinen kopf wirft, dann wird es einfach auch schnell peinlich, das muss man auch einfach sagen. aber das beste, was man daraus rausziehen kann, ist, der mensch ist nicht der code, den er schreibt.}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 26:54\~I: viel zwischenmenschliche arbeit auch n\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6tig  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 26:55\~B: absolut  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 26:59\~I: da passt meine n\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4chste frage dazu. und zwar, wenn du code schreibst, oder halt daran arbeitest, wen hast du dann da im kopf? also der n\u228\'E4chste kollege, der's kriegt, den kunden oder f\u252\'FCr wen schreibst du deinen code?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 27:12}{\f1\fs18\b0\i0 \~B: in der ersten linie versuche ich code zu schreiben, mit dem ich selbst zufrieden bin. zufrieden hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt aber nicht, dass ich code schreibe, den nur ich lesen kann. das hei\u223\'DFt in erste linie denke ich, ich lasse mich nicht dazu zwingen, schnell schnell schnell jetzt machen, sondern, daf\u252\'FCr ist scrum auch sehr gut, }{\f1\fs18\b0\i0\cb14\chshdng0\chcbpat14 ich pers\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6nlich sch\u228\'E4tze die storys, wie viel aufwand wir daf\u252\'FCr brauchen und aufgrund meiner sch\u228\'E4tzung habe ich meistens genug zeit, meine story gut zu implementieren mit qualitativem code}{\f1\fs18\b0\i0 . an der stelle kann ich mich selbst meistens easy zufriedenstellen. dann kommt es auf vorherige implementationen an, aber }{\f1\fs18\b0\i0\cb15\chshdng0\chcbpat15 im endeffekt muss jeder code so geschrieben werden, dass, egal welcher entwickler sich ransetzt, er muss anhand der worte, die er liest, nicht anhand der logik, die er sieht, verstehen k\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6nnen, was da passiert}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb15\chshdng0\chcbpat15 da ist das prinzip sehr wichtig, dass man code nicht dokumentiert, weil der code sich selbst erkl\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ren muss. der code ist quasi seine eigene dokumentation. und wenn man diesen punkt nicht schafft, dann kann der code noch so gut sein, man hat eventuell wirtschaftlich unproduktiv gearbeitet, weil der zuk\u252\'FCnftige entwickler sich vielleicht f\u252\'FCnf stunden einlesen muss.}{\f1\fs18\b0\i0  deswegen, in erster linie an mich selbst, dann an die kollegen und dann irgendwann halt auch an den kunden, an das, was er zahlen muss und was er so bekommt, deswegen. bei der sch\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tzung darf man sich auch nicht zu weit aus dem fenster lehnen, weil ich k\u246\'F6nnte f\u252\'FCr einen kleinen button, den ich einbauen soll, nicht 13 stunden definieren. das ist einfach unmoralisch.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 28:45\~I: basiert deine zeit auf erfahrungswerten oder hast du da irgendwie ein/  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb9\chshdng0\chcbpat9 28:47}{\f1\fs18\b0\i0 \~B: da haben wir das refinement system. also jeder sch\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tzt anhand seiner erfahrung/ die story wurde eben erstmal refined/ sorry, daf\u252\'FCr haben wir das planning. und da eine story klar definiert wurde, k\u246\'F6nnen alle entwickler des teams/ }{\f1\fs18\b0\i0\cb16\chshdng0\chcbpat16 das refinement quasi wird nicht nur mit einer person stattfinden, sondern mit mehreren leuten. die hocken sich dann zusammen, lesen die story sich einmal durch und wir machen es bei uns in der arbeit so, dass wir von drei runterz\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4hlen und jeder schreibt ne stundensch\u228\'E4tzung in den chat. das ist einfach so ein prinzip, das sich bei uns im team bew\u228\'E4hrt hat. wenn die zeiten ziemlich nah aneinander sind, dann geben wir eine (?f\u252\'FCnf-wort) diskussion ab und sagen ja, das passt eigentlich. wenn es aber starke abweichungen gibt, dann wissen wir, dass irgendwas nicht richtig defined wurde. und dann diskutieren wir dar\u252\'FCber. und im endeffekt m\u252\'FCssen wir uns irgendwie darauf einigen, dass wir eine sch\u228\'E4tzung haben, die sinn ergibt.}{\f1\fs18\b0\i0  das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, wenn dann in der implementierung selber die sch\u228\'E4tzung nicht stimmt, ist es nicht nur mein fehler, aber auch mein fehler. aber es m\u252\'FCssten schon einige dinge schiefgehen, dass bei scrum irgendwas schief geht bei der sch\u228\'E4tzung.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 29:48\~I: dann hast du eben erw\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4hnt, also der code soll auf einem niveau sein, also der soll sich selbst dokumentieren. wie kriegst du/ also keine ahnung, du schreibst code und er kommt direkt so raus, dass er den anforderungen gerecht wird oder wie kommst du dahin?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb9\chshdng0\chcbpat9 30:06}{\f1\fs18\b0\i0 \~B: also keiner ist perfekt und ich habe mich schon selbst dabei ertappt, dass ich fast code committed hab, bei dem eine funktion einfach hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt testlol123 (lacht). und solche methoden kriegen dann, keine ahnung, zwei zahlen rein, sollen die nur multiplizieren und wieder rausgeben. aber wenn die methode testlol123 hei\u223\'DFt, dann/ du kannst dir das nicht denken. du musst die methode \u246\'F6ffnen, du musst schauen, was wird mit den zahlen gemacht, die reinkommen, du siehst ah ok, sie werden multipliziert. der fall ist noch einfach zu verstehen. aber was ist, wenn du dann 50 zeilen codeblock hast und du musst jede zeile f\u252\'FCr zeile verstehen und eventuell du verstehst was nicht richtig. einfacher ist es, wenn die funktion dann hei\u223\'DFt multiplicate oder multipliziereZweiZahlen oder/ man muss es nicht \u252\'FCbertreiben, meistens reicht sowas wie multiply. also korrekte benamung der variablen (?einer) funktion ist sehr sehr wichtig. }{\f1\fs18\b0\i0\cb10\chshdng0\chcbpat10 dann gibt es f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr die entwicklungsumgebung, also die IDEs gibt's viele plug-ins}{\f1\fs18\b0\i0 . einer der bekanntesten f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr javascript oder typescript w\u228\'E4re eslint. linting sind regeln, die vom team selber innerhalb des projekts definiert werden. die dir einfach w\u228\'E4hrend der entwicklung einfach sagen: "hey, hier sollte nicht \u8216\'91test\u8217\'92 stehen." "hier hast du eine methode, die geht \u252\'FCber 100 zeilen lang, das ist unleserlich. k\u246\'F6nntest du die eventuell in 5 weitere methoden, die nur 20 zeilen lang sind aufteilen?" geht logischerweise nicht immer, aber meistens. }{\f1\fs18\b0\i0\cb10\chshdng0\chcbpat10 das sind tools, die dabei helfen, eventuell die logik, die du mit deiner sogenannten (?) geschrieben hast, eventuell nochmal \loch\af1\hich\af1\dbch\af1\uc1\u252\'FCberschaust, einfach quasi ein direktes feedback eines tools.}{\f1\fs18\b0\i0  also da brauchst du keine person, die bezahlt werden muss, sondern das tool hilft dir eben. kann logischerweise nicht alles abdecken. aber im endeffekt geht es darum, wie ich gerade schon gesagt habe, man redet von single responsibility. das sind/ ah, da muss ich mich schon wieder weiter aus dem fenster lehnen. es gibt ein sonet-prinzip. sonet sind f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCnf buchstaben, das s steht f\u252\'FCr single-responsibility. das hei\u223\'DFt ein code, oder eine datei, kriegt nur eine verantwortung.\~das sorgt daf\u252\'FCr, dass, wenn ich die datei \u246\'F6ffne und die hei\u223\'DFt, keine ahnung, mathematische operatoren, dann wei\u223\'DF ich, da werde ich ungef\u228\'E4hr etwas darin finden wie multiply, addition, subtract, sowas, wei\u223\'DFt du? und du sollst da nicht pl\u246\'F6tzlich irgendwas haben, was irgendwie business-logik beinhaltet. es ist schwer zu erkl\u228\'E4ren ohne beispiele.}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 I: ich kann es mir ungef\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4hr vorstellen}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 32:44\~B: genau. das ist nur das s von sonet, aber im endeffekt sollte man/ es sind principles, die jeder anf\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4nger beim entwickeln eigentlich ungef\u228\'E4hr draufhaben sollte. das n\u228\'E4chste w\u228\'E4re open-close-prinzip. das hei\u223\'DFt, du hast datens\u228\'E4tze, die frei erweiterbar sein sollten, aber modifizieren sollte meistens nicht n\u246\'F6tig sein, weil sie gut erstellt wurden. da braucht man gar nicht viel mehr reininterpretieren, weil das hast du meistens dadurch, also diese erweiterbarkeit, wenn du dir grunds\u228\'E4tzlich gedanken gemacht hast vor der implementierung. dann gibt es noch sowas wie/ was gibt es denn noch alles? long story short, es gibt principles, an die man sich halten sollte, ansonsten codeleserlichkeit im sinne von single-responsibility. dann variablennamen richtig definieren, methodennamen richtig definieren. okay, eine wichtige sache ist noch, keine magic numbers. was sind magic numbers? stell dir vor, du hast die richtung von pi. du machst irgendeine pi-rechnung. das hei\u223\'DFt, der umfang eines kreises, okay?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 34:06\~I: ja  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 34:07\~B: dann soll da nicht stehen zwei mal 3,171-blablabla mal radius, da sollte zwei mal eine variable, die pi hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt mal radius hei\u223\'DFen. weil magic numbers. versuch mal in f\u252\'FCnf jahren/ okay dieser umfang ist jetzt ein komisches beispiel, aber versuch mal, wenn du irgendwas mit radioaktiver strahlung, bei dem jedes element seine eigene density hat, irgendwelche zahlen zu interpretieren, wenn sie nicht mit worten definiert sind. kam schon vor, dass ich methoden gesehen hab, wo bei irgendeiner komischen rechnung, die komplett sinn ergeben hat, aber mal 1,1 gemacht wurde. und dann frage ich 80 kollegen: "warum ist da mal 1,1?" und keiner konnt's mir erkl\u228\'E4ren, aber das ergebnis war richtig. manchmal ist code so abstrakt, dass er sich selbst nicht dokumentieren kann, das kann man durch den kleinen manuellen kommentar mit worten gut erkl\u228\'E4ren. das habe ich glaube noch gar nicht gesagt gehabt.}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 35:23\~I: du gibst mir hier eine clean code vorlesung, ich find das sch\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6n (lacht)  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 35:25\~B: ich hab damals angefangen mit, ich wei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DF nicht, kennst du uncle bob?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 35:32\~I: ich bin mir immer nicht sicher, ist das jetzt das, was ich schonmal geh\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6rt hab oder nicht  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 35:39\~B: er hat ein sch\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6nes buch geschrieben und sch\u246\'F6ne vortr\u228\'E4ge gehalten \u252\'FCber clean code. und meistens wenn man \u252\'FCber clean code redet, redet man meistens von der erkl\u228\'E4rung von uncle bob.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 35:50\~I: ja vermutlich war das dann auch, was wir geh\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6rt haben  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 35:50\~B: damals, als ich angefangen hab, hab ich mir ein buch gekauft und ich war richtig motiviert und hab tats\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4chlich ein physisches buch gelesen, nicht mal ein e-book. (?war w\u228\'E4hrend der) ausbildung. aber irgendwann hat man das ganze einfach im Kopf und dann schreibt mans automatisiert.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 36:10\~I: also mit hilfe der tools und dadurch, dass du einfach da so erfahren bist, machst du eigentlich von anfang an relativ richtig?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 36:18\~B: genau. aber deswegen ist meistens aber, weil logischerweise jeder ist nicht von anfang an gut, deswegen ist das vier-augen-prinzip in (?pull-requests) sehr gut, weil die leute, die's noch nicht k\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6nnen, lernen es dadurch, dass sie es falsch machen und dann feedback bekommen durch das vier-augen-prinzip. oder das sechs-augen-prinzip, oder je nachdem, wie viele augen man investieren m\u246\'F6chte.}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 36:50\~I: okay, jetzt hast du das alles sch\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6n erkl\u228\'E4rt, du hast auf arbeit diese ganzen prinzipien, alles ist sch\u246\'F6n durchstrukturiert und das funktioniert auch in der praxis meistens einigerma\u223\'DFen ganz gut so, ja?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 37:00\~B: hoffentlich meistens. kommt auf's thema an, genau  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 37:03\~I: du sagst, du programmierst aber auch viel privat?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 37:04\~B: ja  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 37:06\~I: ist dein vorgehen beim privaten programmieren damit irgendwie vergleichbar?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 37:11\~B: (lacht) absolut nicht. }{\f1\fs18\b0\i0\cb15\chshdng0\chcbpat15 ich bin privat der undisziplinierteste entwickler der welt}{\f1\fs18\b0\i0   }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 37:17\~I: alles klar  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 37:18}{\f1\fs18\b0\i0 \~B: ich schreibe den code nur so, dass ich das in 10 jahren auch nicht lesen kann. aber das liegt nur daran, dass meistens habe ich/ ich fang viele kleine projekte an und kleine projekte haben meistens keine foundation, also keinen boden. und }{\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 wenn ich noch gar nicht wei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DF, dass, was ich hier mache, \u252\'FCberhaupt weiterentwickelt wird, da denk ich mir einfach, ich mach's jetzt quick und dirty, hauptsache es funktioniert}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb5\chshdng0\chcbpat5 im fall von spielehacks oder sowas denke ich, ist das \loch\af1\hich\af1\dbch\af1\uc1\u252\'FCberhaupt m\u246\'F6glich, was ich machen m\u246\'F6chte? ist das \u252\'FCberhaupt ein bot, den ich entwickeln kann?}{\f1\fs18\b0\i0  und }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 dann lege ich erstmal drauflos und schreib wirklich so schmutzig wie's geht aber auch so schnell und produktiv, wie es nur geht den code runter}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 und sobald ich sehe, es hat fu\loch\af1\hich\af1\dbch\af1\uc1\u223\'DF und es k\u246\'F6nnte ein cooles projekt werden, was ich weiterentwickeln m\u246\'F6chte, restarte ich nochmal komplett.}{\f1\fs18\b0\i0  }{\f1\fs18\b0\i0\cb15\chshdng0\chcbpat15 das kann ich machen, weil dadurch, dass ich ein einzelner entwickler bin im privaten, kenne ich jede codestelle.}{\f1\fs18\b0\i0  deswegen kann ich im endeffekt einfach neu anfangen. weil ich mich nicht reinlesen muss, sondern ich kenn schon jede stelle. und }{\f1\fs18\b0\i0\cb6\chshdng0\chcbpat6 da kann ich manchmal sachen fixen, die ich am anfang mit absicht schei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFe gemacht hab}{\f1\fs18\b0\i0 . ansonsten, logischerweise sagt man auf der arbeit, am ende des tages sollte man immer den code committen, damit wenn du morgen krank bist, kann das jemand sehen, kann jemand anderes weitermachen, der nicht du bist. }{\f1\fs18\b0\i0\cb4\chshdng0\chcbpat4 im privaten arbeite ich auch mit source control, weil wenn mein pc abschmiert, m\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6chte ich nicht, dass alle projekte weg sind. aber ich bin nicht so diszipliniert, dass ich am ende des tages committe}{\f1\fs18\b0\i0 , sondern }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 es kam schon vor, dass mir am n\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4chsten tag der pc gecrasht ist und aus irgendeinem grund hat windows diese eine source code datei komplett entcryptet, weil sie eben offen war, sodass ich teilweise die arbeit von einem tag verloren hab}{\f1\fs18\b0\i0 . also ich hab teilweise so auf die harte art und weise gelernt, immer sch\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6n zu committen.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 39:19\~I: dass ich\loch\af1\hich\af1\dbch\af1\uc1\u8217\'92s richtig verstanden hab, im prinzip du hast irgendwie eine idee, codest dann erstmal drauflos, ohne gro\u223\'DF darauf zu achten, dass das irgendwie h\u252\'FCbsch wird und guckst dann, ob das was wird, was du weiterverfolgen m\u246\'F6chtest.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 39:34\~B: genau, absolut  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 39:35\~I: dann nehme ich an, dass es auch schon einige sachen gibt, die du dann nicht weitergemacht hast?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 39:41\~B: absolut. man redet ja immer davon, dass eigentlich entwickler so 50 ideen haben mit 50 angefangenen projekten und es wird nie eins fertiggestellt. es ist nicht nur ein ger\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCcht, es ist meistens so. zumindest bei mir.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 39:56\~I: okay. welche sind/ also gibt (?es ein muster) oder so, welche du nicht weiter machst?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 40:06}{\f1\fs18\b0\i0 \~B: beispiel der spieleentwicklung. ich dachte damals/ ist jetzt ein beispiel, da kann ich ziemlich gut erkl\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ren, weshalb ich es nicht weitergemacht habe, es gibt auch andere f\u228\'E4lle, die sind viel simpler. aber bei der spieleentwicklung dachte ich mir: hey, endlich habe ich meine programmiererfahrung, ich wei\u223\'DF, was ich tue, jetzt will ich endlich mal ein spiel programmieren. was richtig cool wird. aber meistens arbeitet man mit sogenannten spiele-engines. sowas wie unity oder unreal kennt man. und da diese engines eigentlich die gesamte fundamentale programmierung schon liefern, weil es sind echt viele sachen, die man falsch machen kann, die m\u246\'F6chte ich gar nicht von scratch entwickeln, weil das einfach sehr viel ist, was sich nicht um das spiel selber dreht, sondern um, wie das spiel sp\u228\'E4ter funktioniert, wie die pixel gerendert werden und sowas, das will man eigentlich nicht machen bei der spiele-entwicklung. man m\u246\'F6chte an einem coolen spiel arbeiten. da man mit diesen frameworks arbeitet, oder game-engines, f\u228\'E4llt einem erst bei der tats\u228\'E4chlichen erstellung auf, wie wenig man eigentlich programmiert und wie viel man mit design besch\u228\'E4ftigt ist. und }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 deswegen ist mir nach einer woche aufgefallen, ich bin kein spiele-programmierer, ich bin hier grad game-designer und mach die ganze zeit in blender komische b\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ume. weil mein spiel braucht einen baum. und irgendwann ist mir aufgefallen, ich habe komplett das thema verfehlt.}{\f1\fs18\b0\i0  spiele-programmieren hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt halt nicht spiele-programmieren, sondern es hei\u223\'DFt spiele erstellen und dazu geh\u246\'F6rt dann halt sehr viel kunst, sehr viel (?found) technik und so weiter, wenn man sowas alles machen m\u246\'F6chte. auch ein bisschen gescripte, ja. und }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 dadurch habe ich meine gesamte spiele-entwicklung, also um es kurz zu fassen, komplett an den nagel geh\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ngt, also komplett verworfen, weil ich einfach kein interesse daran hatte, noch 80 weitere sachen zu lernen, weil ich eigentlich in der programmierung schon fast verloren war zu der zeit}{\f1\fs18\b0\i0 . das war logischerweise selbsterkl\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4rend, wieso ich da aufgeh\u246\'F6rt hab. dann bei anderen sachen habe ich mir mal/ league of legends ist ja bekannt, das spiel. da habe ich angefangen, ein analytic-tool zu bauen, was quasi ein spiel komplett auswertet, damit man im nachhinein sagen kann, ok, hier war ich richtig gut im spiel, hier habe ich nachgelassen. da kann man quasi durch die statistiken nachvollziehen, warum habe ich nachgelassen. und }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 da habe ich das fundament daf\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr gebaut, aber irgendwann ging es nur noch um formeln und zahlen und nicht nur um das design der coolen app. und da habe ich bei 40 prozent irgendwann aufgeh\u246\'F6rt, weil ich mir dachte, ja ich hab keine lust mehr auf mathe}{\f1\fs18\b0\i0 . weil meistens ist es so, }{\f1\fs18\b0\i0\cb17\chshdng0\chcbpat17 um es auch kurz zu fassen, }{{\*\atrfstart 1}\f1\fs18\b0\i0\cb17\chshdng0\chcbpat17 es ist meistens cool, ein projekt zu starten, weil am anfang schreibst du ganz viel code von scratch und irgendwann geht es darum, repetitiv dieselben sachen zu implementieren, aber f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr weitere features. das musst du halt einfach repetitiv machen. und da wird's manchmal langweilig und wenn du nicht komplett am ball bist oder nicht komplett motiviert bist, weil du f\u252\'FCr diese idee lebst, oder wenn du nicht 100 prozentig wei\u223\'DFt, diese idee wird mir sehr viel geld einbringen, dann kann es sehr schnell vorkommen, dass du einfach sagst, okay, hier h\u246\'F6r ich auf.{\*\atrfend 1}}{\chatn{\*\annotation{\*\atnref 1} 
\pard\plain \ltrch\loch {\f2\fs20\b0\i0 Kosten-Nutzen-Abw\loch\af2\hich\af2\dbch\af2\uc1\u228\'E4gung bzw Motivation/Affekt. Ggf relevant f\u252\'FCr den Spontanen Typ?}}}{\f1\fs18\b0\i0\cb17\chshdng0\chcbpat17  ich hab bock auf neue projekte}{\f1\fs18\b0\i0 . was auch gut ist. weil desto mehr neue projekte du startest, in verschiedenen bereichen, desto mehr neues siehst du und du entwickelst dich auch weiter. also ich w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4re jetzt nicht da, wo ich bin, wenn ich nicht 80 projekte weggeworfen h\u228\'E4tte und mich mit neuen sachen besch\u228\'E4ftige. und ich k\u246\'F6nnte jetzt definitiv keine b\u228\'E4ume designen, wenn ich nicht angefangen h\u228\'E4tte (lacht). diesen skill kann mir keiner wegnehmen.}
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 43:22\~I: du meinst also meistens, dass also irgendwie aus dem einen oder anderen grund das interesse weg ist.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 43:29}{\f1\fs18\b0\i0 \~B: ja. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 ich w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrd sagen, es gibt selten f\u228\'E4lle, wo ich sage, okay, ich bin einfach nicht in der lage das umzusetzen. aber gab es auch schon}{\f1\fs18\b0\i0 . da gab's vor allem bei dieser spiel-hacking-szene, es ist alles sehr maschinennah und wer entwickeln kann, versteht nicht pl\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6tzlich, was der pc mit nullen und einsen macht. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 und dann tauchst du quasi in diese welt ein, siehst einfach, dass du nicht das machst, was du dir eigentlich denkst, und denkst dir: okay, so weit bin ich eigentlich noch gar nicht.}{\f1\fs18\b0\i0  und dann f\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ngst du eigentlich mit fundamentaleren sachen an, damit du ein bisschen besser reinkommst, wenn du (?) nochmal anf\u228\'E4ngst. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 also es gab schon stellen, wo ich gesagt habe, okay, ich w\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4re eigentlich noch gar nicht qualifiziert, das speziell zu machen}{\f1\fs18\b0\i0 , sondern ich sollte eher damit anfangen. das gibt's auch.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 44:15\~I: gab's auch schon stellen, wo du am projekt sa\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt und, keine ahnung, du wusstest zwar theoretisch, was du machen willst, und es theoretisch, also vermutlich auch k\u246\'F6nntest, aber es geht halt trotzdem nicht, irgendwie?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 44:38\~B: im sinne von, du st\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6\u223\'DFt auf fehler, oder du wei\u223\'DFt einfach nicht, wie du's umsetzen m\u246\'F6chtest? oder wie?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 44:49\~I: kann unterschiedlich sein  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 44:50}{\f1\fs18\b0\i0 \~B: }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 also es gab schon logischerweise momente, bei denen ich wegen einem kleinen schreibfehler wie ein vollidiot 15 stunden verschwendet habe}{\f1\fs18\b0\i0 . es war schrecklich. kommt vor, w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCnsch ich keinem, nichtmal meinem schlimmsten feind, weil es kann so frustrierend sein. man memet auch gro\u223\'DF dar\u252\'FCber rum, dass wenn man feierabend macht, hat man nicht feierabend. man denkt die ganze zeit \u252\'FCber diesen fehler nach und sowas hasst man. das ist realit\u228\'E4t. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 und logischerweise kommt es mir auch gerne mal vor, dass ich dann versuche, sachen zu implementieren, es geht nicht, es geht nicht, es geht nicht, es geht nicht und dann habe ich irgendwann einen fehler implementiert.}{\f1\fs18\b0\i0  und }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 manchmal kommt auch so eine richtig gro\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFe anforderung oder so eine richtig riesige idee, aber ich pers\u246\'F6nlich wei\u223\'DF einfach noch nicht/ ich wei\u223\'DF, was ich m\u246\'F6chte, aber wie will ich das in code darstellen?}{\f1\fs18\b0\i0  und dann bin ich manchmal auch stuck gewesen. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 es kam auch schon vor, dass ich deswegen ein projekt verworfen hab. weil ich mir einfach nicht in meinem kopf definieren konnte, wie setz ich das in realit\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4t um.}{\f1\fs18\b0\i0  wenn ich jetzt so sagen w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCrde, ich hab ne richtig geile idee f\u252\'FCr ne app, die selbst schlauer wird. w\u228\'E4r bestimmt cool, okay? aber wie setze ich das um. das ist jetzt ein sehr vages beispiel logischerweise  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 46:07\~I: ja worauf ich quasi mit dem letzten hinauswollte, also ich formuliere die frage nochmal so, denkst du, dass du schonmal sowas wie eine programmierBLOCKADE hattest?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 46:50\~B: absolut. also, man spricht auch von burn-outs oder sowas, wenn du das meinst  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 46:56\~I: das ist bauchgef\loch\af1\hich\af1\dbch\af1\uc1\u252\'FChl, was ich damit meine. wie du's interpretierst  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 47:00}{\f1\fs18\b0\i0 \~B: okay. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 also eine richtige blockade hatte ich mal im sinne von, ich habe es nicht hinbekommen, irgendeine kleinigkeit zu l\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6sen, einfach nur weil ich privat komplett abgelenkt bin}{\f1\fs18\b0\i0  oder/ du schreibst den code nicht wie eine maschine, der mensch logischerweise wird komplett durch private probleme beeinflusst. das hei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, es gab momente bei denen ich einfach depressiv war oder einen schlechten tag hatte und ich hab's einfach ums verrecken nicht hinbekommen, produktiv zu arbeiten. ich hab auf meinen monitor geschaut und dachte mir, alter, ich will nach hause, wann ist endlich 17 uhr. das ist sehr sehr sehr schlimm, weil da f\u252\'FChlt sich logischerweise 15 minuten an wie 3 stunden. und wenn du in einer arbeit bist, mit der du unzufrieden bist, ist es exponentiell schlechter und schlimmer. und wenn du dann dann noch eine arbeitsstelle hast, die dich eventuell nicht gut entlohnt, wird es das exponentielle nochmal exponentiell schlimmer. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 es kann soweit gehen, das habe ich alles schon mitangesehen mit meinen eigenen augen, leute sind so frustriert, sie werfen den job einfach hin. die haben kein bock mehr, sie k\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6nnen nicht mehr.}{\f1\fs18\b0\i0  und das ist vollkommen verst\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4ndlich. warum w\u252\'FCrdest du einen job schreiben }{\f1\fs18\b0\i0\cb18\chshdng0\chcbpat18 mit schlechten anforderungen}{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 , wenn du schlechte phase hast, dein chef ist schei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFe, deine kunden sind schei\u223\'DFe und wissen nicht, was sie m\u246\'F6chten, und im endeffekt wirst du daf\u252\'FCr bezahlt, dass du denselben dreck f\u252\'FCnfmal entwickelst, den es sowieso schon gibt, wenn du einfach excel \u246\'F6ffnest.}{\f1\fs18\b0\i0  da h\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4tte ich kein bock drauf, das zu machen. deswegen habe ich meine alte firma verlassen, meine urspr\u252\'FCnliche ausbildungsfirma, weil }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 ich bin auf diese blockade und sowas gesto\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFen, weil die sachen, die ich dort entwickelt hab, prinzipiell uninteressant waren}{\f1\fs18\b0\i0 . }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 und die anforderungen \loch\af1\hich\af1\dbch\af1\uc1\u246\'F6fter so definiert wurden, wie, wie ziehe ich das meiste geld aus den taschen meiner kunden, weil es war quasi business to business, und nicht, wie schreibe ich den code so performant wie m\u246\'F6glich}{\f1\fs18\b0\i0 . meistens sagt dir auch jemand, du als entwickler wei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFt, du hast etwas umgesetzt in zeitdruck, und du wei\u223\'DFt diese stelle muss unbedingt unbedingt refactored werden. refactoren hei\u223\'DFt einfach du schaust dir die codestelle ein zweites mal an und verbesserst sie. und }{\f1\fs18\b0\i0\cb8\chshdng0\chcbpat8 du sagst deinem/ die person, die dir deine zeit einplant oder deine storys einplant: "ey, gib mir bitte zwei stunden zeit, ich muss diesen code optimieren. es ist schrecklich, das gibt uns in der zukunft nur weitere probleme."}{\f1\fs18\b0\i0  im sinne von, stell dir vor, du baust jetzt ein feld ein, in einer datenbank, das feld ist aber nicht optimal gel\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6st. und mit dieser datenstruktur musst du dich sp\u228\'E4ter rumschlagen und desto mehr daten es gibt, desto schwerer ist das problem, es zu l\u246\'F6sen. weil du kannst das feld nicht einfach ab\u228\'E4ndern, weil es gibt sehr viele daten, die damit arbeiten. wenn du es fr\u252\'FChzeitig l\u246\'F6st, wei\u223\'DFt du, du wirst sp\u228\'E4ter keine sorgen haben. }{\f1\fs18\b0\i0\cb8\chshdng0\chcbpat8 aber dieses fr\loch\af1\hich\af1\dbch\af1\uc1\u252\'FChzeitige l\u246\'F6sen muss abgesegnet werden, weil du entscheidest meistens nicht, was du entwickelst. und wenn dein chef dir dann sagt: "ey, ich will, dass du mehr features entwickelst, weil features bringen geld. ich will nicht, dass du irgendwas optimierst, weil optimieren zahlen die kunden nicht, die wollen features sehen."}{\f1\fs18\b0\i0  das ist aber meistens schuld deines chefs, wenn er sowas nicht abrechnen kann, aber egal. }{\f1\fs18\b0\i0\cb8\chshdng0\chcbpat8 wenn sowas passiert, und dann musst du mehr features entwickeln und irgendwann in einer woche kommt nochmal eine anforderung und da musst du mit dieser schei\loch\af1\hich\af1\dbch\af1\uc1\u223\'DFe, die du vorher entwickelt hast, weiterarbeiten. darauf hast du keinen bock, weil du wei\u223\'DFt eigentlich, du m\u252\'FCsstest nicht mit diesem problem jetzt arbeiten, wenn dein chef dir dir zeit gegeben h\u228\'E4tte, das zu optimieren.}{\f1\fs18\b0\i0  und dann bist du w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCtend auf deinen chef und dann kommst du gerne mal richtung burn-out, um es mal kurz zu definieren. ich muss nicht im detail erkl\u228\'E4ren, wie es dazu kommt, aber wenn dein chef dir probleme verursacht, mit denen du dann sp\u228\'E4ter arbeiten musst, bist du logischerweise irgendwann frustriert.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 51:32\~I: aber privat kann dir das entsprechend weniger passieren, wenn da kein b\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6ser chef sitzt  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 51:35}{\f1\fs18\b0\i0 \~B: ne, das war jetzt alles business. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 im privaten kann es gerne mal passieren, das ist eine andere art von burn-out, mit der k\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4mpfe ich sehr sehr viel. ich habe sehr sehr gro\u223\'DFe ideen mit den dingen, die ich entwickeln m\u246\'F6chte und ich wei\u223\'DF, diese ideen w\u252\'FCrden massiv viel geld bringen oder diese ideen k\u246\'F6nnten ziemlich gro\u223\'DF wachsen. aber halt linear mit der arbeitszeit, die ich reinstecken kann.}{\f1\fs18\b0\i0  und inzwischen, jetzt ein bisschen privates, ich hab seit februar zwei katzen, ich habe eine freundin, mit der ich zusammenlebe, ich hab viel familie. und alles frisst zeit. und damals, als ich alleine gelebt hab und eben noch nicht zwei katzen hatte, war es nach der arbeitszeit so, ich hab acht stunden gearbeitet und dann habe ich acht stunden weitergearbeitet, f\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCr mich selber. es war cool, ich hab 8 stunden mich auf etwas fokussieren k\u246\'F6nnen, es war echt nice. heute ist es so, ich mach feierabend, kochen, katzen f\u252\'FCtten, vielleicht (?) leeren, zeit mit meiner freundin verbringen, familie mal hallo sagen und pl\u246\'F6tzlich ist 22 uhr und du hast noch ne stunde zeit zu arbeiten. }{\f1\fs18\b0\i0\cb7\chshdng0\chcbpat7 und dann bist du frustriert, weil du dich selber nicht so micromanagen kannst, dass du das umsetzen kannst, was du umsetzen m\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6chtest. und damit schaffe ich momentan sehr viel, also mit diesem problem muss ich mich sehr auseinandersetzen, weil ich wei\u223\'DF, dass ich nicht gl\u252\'FCcklich werde, wenn ich praktisch nicht 66 stunden am tag h\u228\'E4tte.}{\f1\fs18\b0\i0  deswegen musste ich mich jetzt selbst davon \loch\af1\hich\af1\dbch\af1\uc1\u252\'FCberzeugen, dass ich die entwicklung ein bisschen reduzieren muss, weil das ist das einzige, was ich runterskalierenkann, der rest ist quasi verantwortlichkeiten, die ich priorisieren muss und wenn ich das nicht priorisieren w\u252\'FCrde, dann w\u252\'FCrde ich einfach schlechte priorit\u228\'E4ten setzen. und da kommst du gerne mal auf einen burn-out oder in eine midlife-crisis und denkst dir: ey, alles ist schei\u223\'DFe, weil wenn mich diese person nicht nerven w\u252\'FCrde, wenn diese schei\u223\'DF katze/ also das ist jetzt alles nur ein beispiel, gell, wie es sein k\u246\'F6nnte/ wenn diese schei\u223\'DF katze nicht da w\u228\'E4r, dann k\u246\'F6nnte ich jetzt weiterprogrammieren. fucking katze, die katze ist schuld. aber die katze ist nicht schuld. das problem ist, dass ich eventuell in der woche sechsmal einkaufen gehe statt zweimal, wenn ich meine woche besser planen w\u252\'FCrde, wei\u223\'DFt du?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 53:44\~I: also du meinst vor allem dein zeitmanagement  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 53:47\~B: genau, zeitmanagement. und zeitmanagement ist ein sehr sehr schwieriges thema, weil wenn du deine zeit managest, musst du deinen problemen in die augen sehen und sagen, hey, ich hab nicht acht stunden zu entwickeln sondern nur vier oder drei oder zwei. und wenn du das vor augen hast, dann hast du keinen bock mehr auf zeit managen. ansonsten versuchst du, und das mach ich momentan, das mache ich aber bewusst, weil ich, ich sage mal, ich habe ambitionen. ich m\loch\af1\hich\af1\dbch\af1\uc1\u246\'F6chte eventuell mit 40 nicht mehr arbeiten, weil ich so viel privates einkommen hab oder sowas. und mit diesen ambitionen, die mich verfolgen, und da tausch ich manchmal schlaf gegen arbeitswillen. das hei\u223\'DFt, ich gehe all meinen verantwortlichkeiten nach, aber geh mal nicht um 22 uhr ins bett, sondern um drei uhr morgens. und da habe ich logischerweise f\u252\'FCnf stunden schlaf oder sechs stunden schlaf oder vier stunden schlaf. am n\u228\'E4chsten tag geht es mir eventuell nicht gut. ist halt so, nehm ich in kauf, ich bin noch jung (lacht). aber es ist keine langzeitl\u246\'F6sung. aber worauf ich eigentlich hinaus m\u246\'F6chte, ist, wenn ich das nicht machen w\u252\'FCrde, weil ich diese ambitionen habe, w\u252\'FCrde ich irgendwann burnouten und m\u252\'FCsste wahrscheinlich, ich wei\u223\'DF nicht, meiner freundin sagen ey, wir m\u252\'FCssen 10% weniger zeit da verbringen, ey, wir m\u252\'FCssen eventuell den einkauf besser organisieren, ey kannst du eventuell mit der katze mehr machen. einfach nur weil ich diese arbeitszeit brauche, um das zu verfolgen, was ich umsetzen m\u246\'F6chte. weil ich mein, dummes beispiel, schau dir elon musk an, der arbeitet 36 stunden am tag. wenn er kann. und dementsprechend kann er viel umsetzen. hei\u223\'DFt aber, dass er bestimmt einige sachen vernachl\u228\'E4ssigt, oder, weil er geld hat, l\u228\'E4sst er einfach andere leute das machen. aber wenn du das nicht hast, dann denkst du dir, alter, ich kann diese coole idee, die mich mit elon musk zum milliard\u228\'E4r macht, nicht umsetzen, weil xy sachen mir in den weg kommen. und ja, das ist quasi, wenn der burnout langsam hittet. er kommt auf verschiedene arten und weisen, aber du wirst einfach w\u252\'FCtend auf alles, was nicht programmierung ist und da musst du aufpassen.  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 55:54\~I: okay. auf programmierung selbst wirst du aber nicht w\loch\af1\hich\af1\dbch\af1\uc1\u252\'FCtend?  }
\par\plain \f1\fs18\b0\i0
\par\plain {\f1\fs18\b0\i0 55:54\~B: nur wenn der code nicht l\loch\af1\hich\af1\dbch\af1\uc1\u228\'E4uft (lacht). es ist alles psychisch im endeffekt. wenn du im team arbeitest, wird deine ganze frustration auf die teammitglieder \u252\'FCbertragen, was deine arbeit beeinflusst, was den code beeinflusst, was deine beziehungen beeinflusst. und wenn alles dann schlechter und schlechter wird, muss nichtmal exponentiell sein, kann einfach linear ein problem werden, was du nicht fixt. weil dann wird es einfach/ dann h\u228\'E4uft sich das einfach auf, jeden tag zwei prozent schlechter und irgendwann bumm. es ist definitiv etwas, was man nicht untersch\u228\'E4tzen darf. also burnout ist definitiv real in dem job. auf verschiedene arten und weisen aber. so mein ich das.  }}